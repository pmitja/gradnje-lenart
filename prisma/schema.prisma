generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String?
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  address     String
  city        String
  slug        String       @unique
  images      String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  type        String
  realEstates RealEstate[] @relation("LocationRealEstate")
  isActive    Boolean      @default(true)
}

model RealEstate {
  id               String        @id @default(cuid())
  name             String
  description      String?
  number           String?
  floor            String?
  size             Float?
  priceWithTax     Float?
  price            Float?
  images           String[]
  locationId       Int
  status           String?
  slug             String        @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  files            Json?
  parkingSpaces    Float?
  shortDescription String?
  spaces           String[]
  energyLevel      String?
  technicalData    Json?
  isExposed        Boolean       @default(false)
  location         Location      @relation("LocationRealEstate", fields: [locationId], references: [id], onDelete: Cascade)
  reservations     Reservation[]
  customerId       String?
  customer         Customer?     @relation(fields: [customerId], references: [id])
}

model Reservation {
  id           String     @id @default(cuid())
  fullName     String
  email        String
  phoneNumber  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])
  realEstateId String
  customerId   String?
  customer     Customer?  @relation(fields: [customerId], references: [id])
}

model Customer {
  id          String        @id @default(cuid())
  fullName    String
  email       String
  phoneNumber String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  realEstates RealEstate[]
  Reservation Reservation[]
}

enum UserRole {
  USER
  ADMIN
}
